# shellcheck shell=bash

# Name:
# Prune and Resymlink
#
# Description:
# Prunes the homefolder for improper dotfiles like '~/.bash_history'. It also makes directories required for things to work properly like '~/.config/yarn/config'. Lastly, it also symlinks directories that are out of the scope of dotfox. More specifically, this symlinks the XDG user directories, ~/.ssh, ~/.config/BraveSoftware, etc. to the shared drive mounted under /storage

action() {
	# Remove crap that some programs append to ~/.bashrc, etc.
	for file in ~/.profile ~/.bashrc ~/.bash_profile "${ZDOTDIR:-$HOME}/.zshrc" "${XDG_CONFIG_HOME:-$HOME/.config}/fish/config.fish"; do
		if [ ! -f "$file" ]; then
			continue
		fi

		print.info "Cleaning '$file'"

		local file_string=
		while IFS= read -r line; do
			file_string+="$line"$'\n'

			if [[ "$line" == '# ---' ]]; then
				break
			fi
		done < "$file"; unset line

		printf '%s' "$file_string" > "$file"
	done; unset file


	local -r storage_home='/storage/ur/storage_home'
	local -r storage_other='/storage/ur/storage_other'

	# Create symlinks
	must_link "$HOME/.dots/user/scripts" "$HOME/scripts"
	must_link "$XDG_CONFIG_HOME/X11/Xcompose" "$HOME/.Xcompose"
	must_link "$XDG_CONFIG_HOME/Code/User/settings.json" "$XDG_CONFIG_HOME/Code - OSS/User/settings.json"
	must_link "$XDG_CONFIG_HOME/X11/Xmodmap" "$HOME/.Xmodmap"
	must_link "$XDG_CONFIG_HOME/X11/Xresources" "$HOME/.Xresources"

	if [ -d "$storage_home" ]; then
		must_link "$storage_home/Dls" "$HOME/Dls"
		must_link "$storage_home/Docs" "$HOME/Docs"
		must_link "$storage_home/Music" "$HOME/Music"
		must_link "$storage_home/Pics" "$HOME/Pics"
		must_link "$storage_home/Vids" "$HOME/Vids"
	else # TODO: move elsewhere
		mkdir -p "$HOME/Downloads"
		mkdir -p "$HOME/Documents"
		mkdir -p "$HOME/Music"
		mkdir -p "$HOME/Pictures"
		mkdir -p "$HOME/Videos"
	fi

	if [ -d "$storage_other" ]; then
		must_link "$storage_other/mozilla" "$HOME/.mozilla"
		must_link "$storage_other/ssh" "$HOME/.ssh"
		must_link "$storage_other/BraveSoftware" "$XDG_CONFIG_HOME/BraveSoftware"
		must_link "$storage_other/calcurse" "$XDG_CONFIG_HOME/calcurse"
		must_link "$storage_other/fonts" "$XDG_CONFIG_HOME/fonts"
		must_link "$storage_other/password-store" "$XDG_DATA_HOME/password-store"
	fi

	if [ -d "$HOME/Docs/Programming" ]; then
		must_link "$HOME/Docs/Programming/challenges" "$HOME/challenges"
		must_link "$HOME/Docs/Programming/experiments" "$HOME/experiments"
		must_link "$HOME/Docs/Programming/git" "$HOME/git"
		must_link "$HOME/Docs/Programming/repos" "$HOME/repos"
		must_link "$HOME/Docs/Programming/workspaces" "$HOME/workspaces"

		mkdir -p ~/.dots/.bin
		for f in ~/.dots/.bin/*; do unlink "$f"; done
		for file in "$HOME/Docs/Programming/repos/Groups/Bash"/{bake,basalt,choose,hookah,foxomate,glue,rho,shelldoc,shelltest,woof}/pkg/bin/*; do
			ln -fs "$file" ~/.dots/.bin
		done
	fi


	# Create directories for programs that require a directory to exist to use it
	must_dir "$XDG_STATE_HOME/history"
	must_dir "$XDG_DATA_HOME/maven"
	must_dir "$XDG_DATA_HOME"/vim/{undo,swap,backup}
	must_dir "$XDG_DATA_HOME"/nano/backups
	must_dir "$XDG_DATA_HOME/zsh"
	must_dir "$XDG_DATA_HOME/X11"
	must_dir "$XDG_DATA_HOME/xsel"
	must_dir "$XDG_DATA_HOME/tig"
	must_dir "$XDG_CONFIG_HOME/sage" # $DOT_SAGE
	must_dir "$XDG_CONFIG_HOME/less" # $LESSKEY
	must_dir "$XDG_DATA_HOME/gq/gq-state" # $GQ_STATE
	must_dir "$XDG_DATA_HOME/sonarlint" # $SONARLINT_USER_HOME
	must_dir "$XDG_DATA_HOME/nvm"
	must_file "$XDG_CONFIG_HOME/yarn/config"
	must_file "$XDG_DATA_HOME/tig/history"


	# Remove autogenerated dotfiles
	must_rm .bash_history
	must_rm .flutter
	must_rm .flutter_tool_state
	must_rm .gitconfig
	must_rm .gmrun_history
	must_rm .inputrc
	must_rm .lesshst
	must_rm .mkshrc
	must_rm .pulse-cookie
	must_rm .pythonhist
	must_rm .sqlite_history
	must_rm .viminfo
	must_rm .wget-hsts
	must_rm .zlogin
	must_rm .zshrc
	must_rm .zprofile
	must_rm .zcompdump
	must_rm "$XDG_CONFIG_HOME/zsh/.zcompdump"
	must_rmdir Desktop
	must_rmdir Documents
	must_rmdir Pictures
	must_rmdir Videos

	# Miscellaneous
	chmod 0700 ~/.gnupg
	chmod 0700 ~/.ssh

	# Per-desktop settings
	if [ "$XDG_SESSION_DESKTOP" = 'cinnamon' ]; then
		dconf write /org/cinnamon/desktop/wm/preferences/mouse-button-modifier  '"<Super>"'
		dconf write /org/cinnamon/desktop/interface/clock-show-date 'true'
	else
		print.warn "Variable '\$XDG_SESSION_DESKTOP' is empty"
	fi

	# Remove broken symlinks
	for file in "$HOME"/*; do
		if [ -L "$file" ] && [ ! -e "$file" ]; then
			unlink "$file"
		fi
	done
}

util_get_file() {
		if [[ ${1::1} == / ]]; then
			REPLY="$1"
		else
			REPLY="$HOME/$1"
		fi
	}

	must_rm() {
		util_get_file "$1"
		local file="$REPLY"

		if [ -f "$file" ]; then
			if rm -f "$file"; then
				print.info "Removed file '$file'"
			else
				print.warn "Failed to remove file '$file'"
			fi
		fi
	}

	must_rmdir() {
		util_get_file "$1"
		local dir="$REPLY"

		if [ -d "$dir" ]; then
			if rmdir "$dir"; then
				print.info "Removed directory '$dir'"
			else
				print.warn "Failed to remove directory '$dir'"
			fi
		fi
	}

	must_dir() {
		util_get_file "$1"
		local dir="$REPLY"

		if [ ! -d "$dir" ]; then
			if mkdir -p "$dir"; then
				print.info "Created directory '$dir'"
			else
				print.warn "Failed to create directory '$dir'"
			fi
		fi
	}

	must_file() {
		util_get_file "$1"
		local file="$REPLY"

		if [ ! -f "$file" ]; then
			if mkdir -p "${file%/*}" && touch "$file"; then
				print.info "Created file '$file'"
			else
				print.warn "Failed to create file '$file'"
			fi
		fi
	}

	must_link() {
		util_get_file "$1"
		local src="$REPLY"

		util_get_file "$2"
		local link="$REPLY"

		if [ -d "$link" ] && [ ! -L "$link" ]; then
			local children=("$link"/*)
			if (( ${#children[@]} == 0)); then
				rmdir "$link"
			else
				print.warn "Skipping symlink from '$src' to '$link'"
				return
			fi
		fi
		if [ ! -e "$src" ]; then
			print.warn "Failed to symlink '$src' to $link"
			return
		fi

		if ln -sfT "$src" "$link"; then
			print.info "Symlinking '$src' to $link"
		else
			print.warn "Failed to symlink '$src' to '$link'"
		fi
	}

	check_dot() {
		if [ -e "$HOME/$1" ]; then
			print.warn "File or directory '$1' exists"
		fi
	}
