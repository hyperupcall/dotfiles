# shellcheck shell=bash

# Name:
# dirs
#
# Description:
# Deal with:
# - Mounting file systems (if applicable)
# - Removing pre-existing dotfiles
# - Creating necessary directories and files
# - Creating necessary symlinks
# - Removing extraneous directories and files
# - Removing broken symlinks
# - Removing autoappended content to `~/.{profile,bashrc}`, etc.

main() {
	dotmgr.get_profile
	local profile="$REPLY"

	local part_uuid="c875b5ca-08a6-415e-bc11-fc37ec94ab8f"
	local mnt='/storage/ur'
	if [ -d "$mnt" ]; then
		if ! grep -q "$mnt" /etc/fstab; then
			printf '%s\n' "PARTUUID=$part_uuid  $mnt  btrfs  defaults,noatime,X-mount.mkdir  0 0" \
				| sudo tee -a /etc/fstab >/dev/null
			sudo mount "$mnt"
		fi
	fi

	for file in ~/.profile ~/.bashrc ~/.bash_profile "${ZDOTDIR:-$HOME}/.zshrc" "${XDG_CONFIG_HOME:-$HOME/.config}/fish/config.fish"; do
		if [ ! -f "$file" ]; then
			continue
		fi

		local file_string=
		while IFS= read -r line; do
			file_string+="$line"$'\n'

			if [[ "$line" == '# ---' ]]; then
				break
			fi
		done < "$file"; unset -v line

		printf '%s' "$file_string" > "$file"
	done; unset -v file
	core.print_info 'Cleaned shell dotfiles'

	# -------------------------------------------------------- #
	#                  REMOVE BROKEN SYMLINKS                  #
	# -------------------------------------------------------- #
	for file in "$HOME"/*; do
		if [ -L "$file" ] && [ ! -e "$file" ]; then
			unlink "$file"
		fi
	done

	# -------------------------------------------------------- #
	#               CREATE DIRECTORIES AND FILES               #
	# -------------------------------------------------------- #
	must_dir "$HOME/.dots/.home"
	must_dir "$HOME/.dots/.repos"
	must_dir "$HOME/.dots/.usr"/{bin,include,lib,libexec,local,share,src}
	must_dir "$HOME/.gnupg"
	must_dir "$HOME/.ssh"
	must_dir "$XDG_STATE_HOME/history"
	must_dir "$XDG_STATE_HOME/Android/Sdk"
	must_dir "$XDG_DATA_HOME/maven"
	must_dir "$XDG_DATA_HOME"/nano/backups
	must_dir "$XDG_DATA_HOME/zsh"
	must_dir "$XDG_DATA_HOME/X11"
	must_dir "$XDG_DATA_HOME/xsel"
	must_dir "$XDG_DATA_HOME/tig"
	must_dir "$XDG_CONFIG_HOME/sage" # $DOT_SAGE
	must_dir "$XDG_CONFIG_HOME/less" # $LESSKEY
	must_dir "$XDG_CONFIG_HOME/Code - OSS/User"
	must_dir "$XDG_DATA_HOME/gq/gq-state" # $GQ_STATE
	must_dir "$XDG_DATA_HOME/sonarlint" # $SONARLINT_USER_HOME
	must_file "$XDG_CONFIG_HOME/yarn/config"
	must_file "$XDG_STATE_HOME/tig/history"
	must_file "$XDG_STATE_HOME/history/zsh_history" # ZSH's $HISTFILE
	chmod 0700 "$HOME/.gnupg"
	chmod 0700 "$HOME/.ssh"


	# -------------------------------------------------------- #
	#               REMOVE AUTOGENERATED DOTFILES              #
	# -------------------------------------------------------- #
	must_rm .bash_history
	must_rm .dir_colors
	must_rm .dircolors
	must_rm .flutter
	must_rm .flutter_tool_state
	must_rm .gitconfig
	must_rm .gmrun_history
	must_rm .inputrc
	must_rm .lesshst
	must_rm .mkshrc
	must_rm .pulse-cookie
	must_rm .pythonhist
	must_rm .sqlite_history
	must_rm .viminfo
	must_rm .wget-hsts
	must_rm .zlogin
	must_rm .zshenv
	must_rm .zshrc
	must_rm .zprofile
	must_rm .zcompdump


	# -------------------------------------------------------- #
	#                      CREATE SYMLINKS                     #
	# -------------------------------------------------------- #
	local -r storage='/storage'
	local -r storage_home='/storage/ur/storage_home'
	local -r storage_other='/storage/ur/storage_other'

	must_link "$HOME/.dots/user/scripts" "$HOME/scripts"
	must_link "$XDG_CONFIG_HOME/X11/Xmodmap" "$HOME/.Xmodmap"
	must_link "$XDG_CONFIG_HOME/X11/Xresources" "$HOME/.Xresources"
	must_link "$XDG_CONFIG_HOME/Code/User/settings.json" "$XDG_CONFIG_HOME/Code - OSS/User/settings.json"

	local -ra directories_default=(
		# ~/Desktop
		~/Downloads
		~/Templates ~/Public ~/Documents
		# ~/Music
		~/Pictures
		~/Videos
	)
	local -ra directoriesCustom=(
		# ~/Desktop
		~/Dls
		~/Docs/Templates ~/Docs/Public ~/Docs
		# ~/Music
		~/Pics
		~/Vids
	)
	local -ra directories_shared=(
		~/Desktop
		~/Music
	)
	# Use 'cp -f' for "$XDG_CONFIG_HOME/user-dirs.dirs"; otherwise unlink/link operation races
	if [ -d "$storage" ]; then
		cp -f "$HOME/.dots/user/.config/user-dirs.dirs/user-dirs-custom.conf" "$XDG_CONFIG_HOME/user-dirs.dirs"

		# XDG User Directories
		local dir=
		for dir in "${directories_default[@]}"; do
			must_rmdir "$dir"
		done; unset -v dir
		for dir in "${directories_shared[@]}"; do
			must_dir "$dir"
		done; unset -v dir
		must_link "$storage_home/Desktop" "$HOME/Desktop"
		must_link "$storage_home/Dls" "$HOME/Dls"
		must_link "$storage_home/Docs" "$HOME/Docs"
		must_link "$storage_home/Music" "$HOME/Music"
		must_link "$storage_home/Pics" "$HOME/Pics"
		must_link "$storage_home/Vids" "$HOME/Vids"

		# Populate ~/.dots/.home/
		must_link "$HOME/Desktop" "$HOME/.dots/.home/Desktop"
		must_link "$HOME/Dls" "$HOME/.dots/.home/Downloads"
		must_link "$HOME/Docs" "$HOME/.dots/.home/Documents"
		must_link "$HOME/Music" "$HOME/.dots/.home/Music"
		must_link "$HOME/Pics" "$HOME/.dots/.home/Pictures"
		must_link "$HOME/Vids" "$HOME/.dots/.home/Videos"
		must_link "$HOME/.cache" "$HOME/.dots/.home/xdg_cache_dir"
		must_link "$HOME/.config" "$HOME/.dots/.home/xdg_config_dir"
		must_link "$HOME/.local/state" "$HOME/.dots/.home/xdg_state_dir"
		must_link "$HOME/.local/share" "$HOME/.dots/.home/xdg_data_dir"

		# Miscellaneous
		must_link "$storage_other/mozilla" "$HOME/.mozilla"
		if [ ! -L "$HOME/.ssh" ]; then rm -f "$HOME/.ssh/known_hosts"; fi
		must_link "$storage_other/ssh" "$HOME/.ssh"
		must_link "$storage_other/BraveSoftware" "$XDG_CONFIG_HOME/BraveSoftware"
		must_link "$storage_other/fonts" "$XDG_CONFIG_HOME/fonts"
		must_link "$storage_other/password-store" "$XDG_DATA_HOME/password-store"
	else
		cp -f "$HOME/.dots/user/.config/user-dirs.dirs/user-dirs-default.conf" "$XDG_CONFIG_HOME/user-dirs.dirs"

		# XDG User Directories
		local dir=
		for dir in "${directoriesCustom[@]}"; do
			must_rmdir "$dir"
		done; unset -v dir
		for dir in "${directories_shared[@]}"; do
			must_dir "$dir"
		done; unset -v dir
		must_dir "$HOME/Desktop"
		must_dir "$HOME/Downloads"
		must_dir "$HOME/Documents"
		must_dir "$HOME/Templates"
		must_dir "$HOME/Public"
		must_dir "$HOME/Music"
		must_dir "$HOME/Pictures"
		must_dir "$HOME/Videos"

		# Populate ~/.dots/.home/
		must_link "$HOME/Desktop" "$HOME/.dots/.home/Desktop"
		must_link "$HOME/Downloads" "$HOME/.dots/.home/Downloads"
		must_link "$HOME/Documents" "$HOME/.dots/.home/Documents"
		must_link "$HOME/Music" "$HOME/.dots/.home/Music"
		must_link "$HOME/Pictures" "$HOME/.dots/.home/Pictures"
		must_link "$HOME/Videos" "$HOME/.dots/.home/Videos"

		# Miscellaneous
	fi

	for file in ~/.dots/.usr/bin/*; do unlink "$file"; done
	if [ "$profile" = 'desktop' ]; then
		must_link "$HOME/Docs/Programming/challenges" "$HOME/challenges"
		must_link "$HOME/Docs/Programming/experiments" "$HOME/experiments"
		must_link "$HOME/Docs/Programming/git" "$HOME/git"
		must_link "$HOME/Docs/Programming/repos" "$HOME/repos"
		must_link "$HOME/Docs/Programming/workspaces" "$HOME/workspaces"

		local file=
		for file in "$HOME/Docs/Programming/repos/Groups/Bash"/{bake,basalt,choose,hookah,foxomate,glue,rho,shelldoc,shelltest,woof}/pkg/bin/*; do
			ln -fs  "$file" ~/.dots/.usr/bin
		done; unset -v file
	elif [ "$profile" = 'laptop' ]; then
		local file=
		for file in ~/.dots/.usr/bin/*; do unlink "$file"; done
		for file in "$HOME/Documents/Programming/repos"/{bake,basalt,choose,hookah,foxomate,glue,rho,shelldoc,shelltest,woof}/pkg/bin/*; do
			ln -fs "$file" ~/.dots/.usr/bin
		done; unset -v file
	fi

	# Must be last as they are dependent on previous symlinking
	must_dir "$HOME/.dots/.home/Documents/Shared"
	must_dir "$HOME/.dots/.home/Pictures/Screenshots"
	must_link ~/.dots/.dotmgr/bin/dotmgr ~/.dots/.usr/bin/dotmgr
	if [ "$profile" = 'desktop' ]; then
		must_link ~/repos/dotfox/dotfox ~/.dots/.usr/bin/dotfox
	fi
	must_link ~/Documents/repos/basalt/pkg/bin/basalt ~/.dots/.usr/bin/basalt
}
