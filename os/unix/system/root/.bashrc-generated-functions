# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
chr() {
	[ -z "$1" ] && { _profile_util_die "chr: No mountpoint specified"; return; }
	[ -d "$1" ] || { _profile_util_die "chr: Folder doesn't exist"; return; }

	# xterm-kitty cleaner
	command -v arch-chroot >/dev/null 2>&1 && {
    		[ "$TERM" = xterm-kitty ] && {
			TERM=xterm-256color
			sudo arch-chroot "$@"
			TERM=xterm-kitty
		}

		sudo arch-chroot "$@"
		return
	}

	sudo mount -o bind -t proc /proc "$1/proc"
	sudo mount -o bind -t sysfs /sys "$1/sys"
	sudo mount -o bind -t tmpfs /run "$1/run"
	sudo mount -o bind -t devtmpfs /dev "$1/dev"

	[ "$TERM" = xterm-kitty ] && {
		TERM=xterm-256color
		sudo chroot "$1"
		TERM=xterm-kitty
		return
	}

	sudo chroot "$1"
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
del() {
	if command -v trash-put >/dev/null 2>&1; then
		for f; do
			trash-put "$f" || {
				_profile_util_die "del: 'trash-put' failed"
				return
			}
		done
	elif command -v gio >/dev/null 2>&1; then
		for f; do
			gio trash "$f" || {
				_profile_util_die "del: 'gio trash' failed"
				return
			}
		done
	else
		_profile_util_log_die "del: Neither 'trash-cli' nor 'gio' installed"
		return
	fi
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
unlink() {
	for arg; do
		case "$arg" in
		--help|--version)
			command unlink "$@"
			return
			;;
		esac
	done

	for file; do
		command unlink "$file"
	done

	unset -v arg file
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
r() {
	for file; do
		if [ -d "$file" ]; then
			command rmdir -p "$file"
		else
			command rm "$file"
		fi
	done
	unset -v file
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
t() {
	[ $# -eq 0 ] && {
		_profile_util_log_error 't: Missing file arguments'
		return
	}

	for arg; do
		case "$arg" in
		-a*|-c*|--no-create*|-d*|--date*|-f*|-h*|--no-dereference*|-m*|-r*|--reference*|-t*|--time*|--help*|--version*|--)
			_profile_util_log_die "t: Args detected. Please use 'touch'"
			return
			;;
		esac
	done
	unset -v arg

	for file; do
		mkdir -p "$(dirname "$file")"
		command touch "$file"
	done
	unset -v file
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
v() {
	s=
	if [ "$(stat -c "%G" "$1")" = "root" ]; then
		s="sudo"
	fi

	_v_editor="${EDITOR:-vi}"

	if [ $# -eq 0 ]; then
		"$_v_editor" .
	else
		[ $# -eq 1 ] && $s mkdir -p "$(dirname "$1")"

		$s "$_v_editor" "$@"
	fi

	unset -v _v_editor
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
cdls() {
	cd -- "$1" || { _profile_util_die "cdls: cd failed"; return; }
	_profile_util_ls
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
mkcd() {
	command mkdir -p -- "$@"
	cd -- "$@" || { _profile_util_die "mkcd: could not cd"; return; }
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
cls() {
	clear
	reset
	tput reset
	tput rs1
	# uses our function
	stty sane
	printf "\033c"
	printf '\033\143'
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
faketty() {
	unbuffer -p "@"
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
isup() {
	command curl -sS --head --X GET "$1" | grep -q '200 OK'
}

# This function is autogenerated by /home/edwin/scripts/generateRootFunctions.sh
kkexec() {
	sudo kexec -l /efi/EFI/arch/vmlinuz-linux-lts --initrd /efi/EFI/arch/initramfs-linux-lts.img --reuse-cmdline
	sudo systemctl kexec
	# sudo kexec -e
}

