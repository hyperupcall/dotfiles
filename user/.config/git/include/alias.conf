[alias]
	#
	# ─── AUGMENTS ───────────────────────────────────────────────────────────────────
	#

	update = add -u .
	unstage = reset HEAD
	untracked = status -u .
	untracked-at = status -u
	assume-unchanged = update-index --assume-unchanged
	append-tracked = "!f() { git add . && git commit -a --amend --no-edit; }; f"
	files = !git diff --name-only $(git merge-base HEAD \"$REVIEW_BASE\")
	diffy = difftool --no-prompt --trust-exit-code --extcmd 'icdiff -N -U3'
	stat = !git diff --stat $(git merge-base HEAD \"$REVIEW_BASE\")
	review = !vim -p $(git files) +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
	reviewone = !vim -p +\"tabdo Gdiff $REVIEW_BASE\" +\"let g:gitgutter_diff_base = '$REVIEW_BASE'\"
	# show the last tag
	lt = describe --tags --abbrev=0
	# list branches sorted by last modified
  	amend = commit -a --amend -C HEAD
	b = "!git for-each-ref --sort='-authordate' --format='%(authordate)%09%(objectname:short)%09%(refname)' refs/heads | sed -e 's-refs/heads/--'"
	# list aliases
	alias-ls = "!git config -l | grep alias | cut -c 7-"
	reattr = !sh -c "\"git stash save; \
                   rm .git/index; \
                   git checkout HEAD -- \\\"$(git rev-parse --show-toplevel)\\\"; \
                   git stash pop\""
	undo-commit = reset --soft HEAD^
	aliases = !git config --get-regexp 'alias.*' | colrm 1 6 | sed 's/[ ]/ = /'
	pkgver = "!git describe --long | sed \"s/^v//;s/\\([^-]*-g\\)/r\\1/;s/-/./g\""
	tagv = !git tag -v $(git describe --abbrev=0)
	init2 = "!git init && git add -A && git commit -m 'chore: initial commit'"
	conflict-ls = diff --name-only --diff-filter=U
	count-lines = "! git log --author=\"$1\" --pretty=tformat: --numstat | awk '{ add += $1; subs += $2; loc += $1 - $2 } END { printf \"added lines: %s, removed lines: %s, total lines: %s\\n\", add, subs, loc }' #"
	; https://stackoverflow.com/questions/24807930/git-list-all-authors-of-a-folder-of-files TODO
	somethign1= "git ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -d | uniq"
	something2="git blame --line-porcelain "_MY_FILE_" | sed -n 's/author //p' | sort | uniq -c | sort -rn"
	blffame="git ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr"




	# Swaps 'origin' and 'upstream'
	zremoteswap = "!{ git rev-parse --verify --quiet origin &>/dev/null && git remote rename origin __temp__; }; { git rev-parse --verify --quiet upstream &>/dev/null && git remote rename upstream origin; }; { git rev-parse --verify --quiet __temp__ &>/dev/null && git remote rename __temp__ upstream; }"

	aAc = "!git aA && git c"
	aac = "!git aa && git c"

	aAds = "!git aA && git ds"
	aads = "!git aa && git ds"

	aAcp = "!git aA && git c && git p"
	aacp = "!git aa && git c && git p"

	aAcam = "!git aA && git cam"
	aacam = "!git aa && git cam"
	aAcamnv = "!git aA && git camnv"
	aacamnv = "!git aa && git camnv"

	aAcamne = "!git aA && git camne #"
	aacamne = "!git aa && git camne #"
	aAcamnenv = "!git aA && git camnenv #"
	aacamnenv = "!git aa && git camnenv #"

	aAcamnepf = "!git aA && git camnepf #"
	aacamnepf = "!git aa && git camnepf #"
	aAcamnenvpf = "!git aA && git camnenvpf #"
	aacamnenvpf = "!git aa && git camnenvpf #"

	#
	# ─── AUXILIARY ──────────────────────────────────────────────────────────────────
	#

	# Porcelain Subcommands
	# Ancillary Commands
	# Plumbing Commands
	# aliasName = aliasValue


	# add, am, archive
	# annotate, archimport
	# apply
	a = add -v
	aa = add . -v
	aA = add -A -v
	ai = add -i -v
	ap = add -p -v

	# bisect, branch, bundle
	# blame, bugreport
	bi = bisect
	br = branch
	brv = branch -v
	brvv = branch -vv
	brm = branch -m
	brmm = branch -m main
	brM = branch -M
	brMm = branch -M main
	brc = branch -c
	brC = branch -C
	brd = branch -d
	brD = branch -D
	brr = branch -r
	brrv = branch -rv
	bred = branch --edit-description
	bu = bundle
	bl = blame


	# checkout, cherry-pick, citool, clean, clone, commit
	# config, count-objects, cvsexportcommit, cvsimport, cvsserver
	# checkout-index, commit-graph, commit-tree, cat-file, cherry
	co = checkout
	cob = checkout -b
	cp = cherry-pick -x
	cpx = cherry-pick -x
	cl = clone
	c = "!git commit -v && git s"
	cnv = "!git commit --no-verify -v && git s"
	ca = commit -av
	cae = commit --allow-empty -v
	caem = commit --allow-empty -v -m
	caene = commit --allow-empty --no-edit -v
	cneae = commit --no-edit --allow-empty -v
	cam = commit --amend -v
	camnv = commit --amend --no-verify -v
	camae = commit --amend --allow-empty -v
	camaenv = commit --amend --allow-empty --no-verify -v
	campf = "!git cam && git pf"
	camnvpf = "!git camnv && git pf"
	camne = commit --amend --no-edit -v
	camnenv = commit --amend --no-edit --no-verify -v
	camnepf = "!git camne && git pf"
	camnenvpf = "!git camnenv && git pf"
	camm = commit --amend -m
	cammnv = "!git camnvm"
	camnvm = commit --ammend --no-verify -m
	cm = commit -v -m
	cmae = commit --allow-empty -v -m
	cfg = config


	# describe, diff
	# difftool
	# diff-files, diff-index, diff-tree, daemon
	d = diff
	dh = diff HEAD
	dh1 = diff HEAD~1
	dh2 = diff HEAD~2
	dh3 = diff HEAD~3
	dhh = diff HEAD..HEAD
	dhh1 = diff HEAD..HEAD~1
	dhh2 = diff HEAD..HEAD~2
	dhh3 = diff HEAD..HEAD~3
	dh1h = diff HEAD~1..HEAD
	dh1h1 = diff HEAD~1..HEAD~1
	dh1h2 = diff HEAD~1..HEAD~2
	dh1h3 = diff HEAD~1..HEAD~3
	ds = diff --staged
	dc = diff --cached


	# fetch, format-patch
	# fast-export, fast-import, filter-branch, fsck
	# for-each-ref, for-each-repo, fetch-pack
	f = fetch
	fa = fetch --all


	# gc, grep, gui
	#
	# get-tar-commit-id
	g = grep
	gtcid = get-tar-commit-id

	# help
	#
	# hash-object, http-backend
	h = help
	ho = hash-object
	hb = http-backend


	# init
	# instaweb, imap-send
	# index-pack
	i = init
	iw = instaweb
	is = imap-send
	ip = index-pack


	# log
	#
	# ls-files, ls-remote, ls-tree
	l = log
	lol = log --oneline
	lg1 = log --oneline --decorate --no-merges --max-count=20
	lg2 = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %C(dim white)(%an)%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative
	lg3 = log --graph --abbrev-commit --decorate --date=relative --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg4 = log --pretty=format:"%C(yellow)%h\\ %ad%Cred%d\\ %Creset%s%Cblue\\ [%cn]" --decorate --date=short
	lg5 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg6 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg7 = git log --graph --pretty=format:'%Cred%h%Creset %an: %s - %Creset %C(yellow)%d%Creset %Cgreen(%cr)%Creset' --abbrev-commit --date=relative



	# maintenance, merge, mv
	# mergetool, merge-tree
	# merge-file, merge-index, mktag, mktree, multi-pack-index, merge-base
	m = merge


	# notes
	#
	# name-rev
	n = notes
	nr = name-rev


	# pull, push
	# pack-refs, prune, p4
	# pack-objects, prune-packed, pakc-redundant
	pl = pull
	plr = pull --rebase
	plom = pull origin main
	plon = pull origin master
	plou = pull origin upstream

	p = push
	pf = push --force-with-lease
	pt = push --tags
	po = push origin
	pof = push origin --force-with-lease
	pom = push origin main
	pon = push origin master
	puo = push -u origin
	puom = push -u origin main
	puon = push -u origin master
	pu = push upstream
	#puf = push upstream --force-with-lease # intentionally commented
	pum = push upstream main
	pun = push upstream master
	puu = push -u upstream
	puumu = push -u upstream main
	puunu = push -u upstream master

	# quiltimport
	qi = quiltimport


	# range-diff, rebase, reset, restore, revert, rm
	# reflog, remote, repack, replace, rerere, request-pull
	# read-tree, rev-list, rev-parse
	rb = rebase
	rbi = rebase --interactive
	rba = rebase --abort
	rbc = rebase --continue
	rbet = rebase --edit-todo
	rs = reset
	rsp = reset -p
	rv = revert
	rem = remote
	remv = remote -v
	rema = remote add
	remao = remote add origin
	remau = remote add upstream
	remren = remote rename
	remrem = remote remove
	remsh = remote set-head
	remsb = remote set-branches
	remsu = remote set-url
	remsuo = remote set-url origin
	remsuu = remote set-url upstream
	remgu = remote get-url
	remp = remote prune
	remswap = zremoteswap


	# shrotlog, show, sparse-checkout, stash, status, submodule, switch
	# show-branch, send-email, svn
	# symbolic-ref, show-index, show-ref, send-pack
	st = stash
	stcl = stash clear
	stcr = stash create
	stl = stash list
	sts = stash save
	std = stash drop
	stpo = stash pop
	stpu = stash push
	stpuki = stash push --keep-index
	sta = stash apply
	s = status --short --branch
	sm = submodule
	sw = switch
	swc = switch -c
	swC = switch -C
	sb = show-branh
	sr = show-ref
	sp = send-pack


	# tag
	#
	t = tag
	ta = tag -a
	tl = tag -l
	td = tag -d
	tm = tag -m

	#
	# unstage, update
	# unpack-objects, update-index, update-ref
	# unpack-file, update-server-info
	us = unstage
	u = update
	ur = update-ref


	#
	# verify-commit, verify-tag
	# var, verify-pack
	vc = verify-commit
	vt = verify-tag
	vp = verify-pack


	# worktree
	# whatchanged
	# write-tree
	w = worktree
	wt = worktree
	wc = whatchanged
